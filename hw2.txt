convert_grammar:
This was a relatively easy exercise and I solved it this way because
it was quick and easy to read. It basically just takes the grammar
as input and returns a tuple with the lhs being the top of the
tree and the rhs is a function I defined that concatenates every
list with the desired type of nonterminal on the lhs into a list
of rules and then returns it once it finds all of them.
parse_prefix:
The reason I solved the problem the way I did was because my initial
approach didn't work and this actually ended up making much more
sense to me intuitively once I figured out how to use the "and"
keyword. This way I ended up using two functions that work together
recursively. The first one will process a rule and is a bit more 
complicated than the second which simply checks if a specific rule
in a list will work until either a rule is found or we run out of
rules in which case it will just return None. The basics of the
way it works is it will attempt to create a parse tree by processing
rules from left to right until one is found that works. The function
that deals with the list of the rules first tries the first rule at
the top of the tree given by what is on the lhs of the tuple
the grammar is found in and running the function on the rhs on it.
The way it does that is it calls the function that processes each
rule on it and if it returns None then it tries the next rule and
if it returns anything other than that it returns whatever it
returned. The other function works by first checking if the current rule
it is passed is empty since if it is we are done and can see if the
acceptor will accept the fragment. If it isn't empty, then we  
see if the fragment is empty. If it is, return none since there won't
be any derivation. If it isn't empty try to pattern match the current
rule you're checking with a terminal or nonterminal value. If it's
a terminal value, then check if it matches the corresponding terminal
value in the fragment. If it does, then run the function again on the
rest of the fragment. Otherwise, return None because this is not the
right derivation. If it's a nonterminal symbol, then you need to go
down another level in the tree (i.e. have the grammar give you the 
list of rules that are of that type), so the other function that
processes the rule list is called on the new list of rules. There
is one really tricky part here, and that is making the acceptor a
curried function. Since we are only looking at one symbol here, if
we find the matching terminal symbols for this symbol, we need to
see if there are any other symbols in the list and if there are,
we need to process them. Therefore, the way to do that is to call
the function that processes a rule on the tail end of the rule
after we have found a working derivation for the first symbol. 
That will happen when the acceptor is called because we will be out
of rules to try for that derivation which means we must have found
an acceptable one since it would return None otherwise. Thus, when
the acceptor would usually be called, we need it to call the
function that processes the rest of the rule that we are working
on. Therefore, for the argument that would usually be the acceptor,
we instead pass it the function that processes a rule with the
parameters of the grammar, the tail of the rule that we are trying
to process on the current level before going down to the next, and
the acceptor. That way once the function finishes the derivation
for that symbol, it can go to the next symbol and find a derivation
for that too. Otherwise it would just spit out the derivation until
it got to a terminal symbol and stop. Then the actual function just
calls the function that begins the process of testing rules. It is
important to note that my program will not work on grammars with
blind alleys and also grammars where it can get stuck in an
infinite loop because the first instruction in a list redirects
to itself or an instruction before it. The other approach I
considered was essentially the same idea of creating a parse tree
in the manner described in the spec, but it got really complicated
because I tried to put it all in one function instead of two, so
by the end of it I had about 12 parameters and I ended up
scrapping it because it was extremely hard to debug and it wasn't
doing the right thing because I hadn't figured out that the
acceptor needs to be updated differently when looking at
nonterminal nodes among other things.
